# Build and test a Java project with Maven, and compute and report test coverage 

name: Java CI with Maven

on:
  push:
    branches: '**'
  pull_request:
    branches: '**'

permissions:
  contents: read

jobs:
  build:
    name: Building, Testing, and Quality Analysis
    runs-on: ubuntu-latest

    permissions:
      checks: write
      contents: write

    steps:
    - id: checkout
      name: Checkout Repository
      uses: actions/checkout@v4  # ✅ Version à jour

    - id: setupjava
      name: Set up with Java 23
      uses: actions/setup-java@v4  # ✅ Version à jour
      with:
        distribution: 'temurin'
        java-version: 23
        cache: 'maven'
        
    - id: mvn
      name: Build with Maven (including running all tests)
      run: mvn -B clean verify jacoco:report --fail-at-end --file pom.xml  
      
    - id: testreport
      name: Publish Test Report
      if: ${{ always() }}
      uses: scacap/action-surefire-report@v1.8.0 
      
    - name: Generate JaCoCo Badge
      id: jacoco
      uses: cicirello/jacoco-badge-generator@v2.11.0  
      with:
        generate-coverage-badge: true
        generate-branches-badge: true
        generate-summary: true
        
    - name: Log coverage percentage
      run: |
        echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
        echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"

    - name: Commit and push the svg badges and the json coverage summary (if it changed)
      uses: EndBug/add-and-commit@v9  
      with:
        default_author: github_actions
        message: 'commit coverage badge and summary'
        add: '*.svg *.json'
        
    - name: Upload JaCoCo coverage report
      uses: actions/upload-artifact@v4  
      with:
        name: jacoco-report
        path: target/site/jacoco/
        
    - name: Comment on PR with coverage percentages
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        REPORT=$(<.github/badges/coverage-summary.json)
        COVERAGE=$(jq -r '.coverage' <<< "$REPORT")%
        BRANCHES=$(jq -r '.branches' <<< "$REPORT")%
        NEWLINE=$'\n'
        BODY="## Test Coverage Summary ${NEWLINE}* __Coverage:__ ${COVERAGE}${NEWLINE}* __Branches:__ ${BRANCHES}"
        gh pr comment ${{github.event.pull_request.number}} -b "${BODY}"
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
